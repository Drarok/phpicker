#!/usr/bin/python

from glob import glob
import json
import os
import re
import subprocess
import sys

config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'config.json')

if not os.path.isfile(config_path):
    print 'Please create \'%s\'.' % config_path
    sys.exit(1)

config = json.load(open(config_path, 'r'))
if not config.get('bin-dir'):
    print 'Your bin-dir configuration is missing.'
    sys.exit(1)

if not os.path.isdir(config.get('bin-dir')):
    print 'Your bin-dir does not exist.'
    sys.exit(1)

def get_homebrew_paths():
    """Get the installed Homebrew PHP paths as a dict, keyed on version."""
    paths = glob('/usr/local/Cellar/php[0-9][0-9]/*/bin')

    result = dict()
    for path in paths:
        version = get_version_from_path(path)
        result[version] = path
    return result

def get_version_from_path(path):
    """Take a string like '/usr/local/Cellar/phpxy/a.b.c/bin', remove the leading
    24 characters, and the trailing 4. Hacky, but quick."""
    return path[24:][0:-4]

def select_version_path(path):
    bin_dir = config.get('bin-dir')
    files = get_files_for_path(path)
    for file_path in files:
        subprocess.call(['ln', '-s', '-f', file_path, bin_dir])

def get_files_for_path(path):
    """Get the files we should symlink from a given path."""
    ignore_files = ['phar.phar']
    return [os.path.join(path, x) for x in os.listdir(path) if x not in ignore_files]

def get_current_version():
    php_path = os.path.join(config.get('bin-dir'), 'php')
    if not os.path.islink(php_path):
        return None
    real_path = os.path.join(os.path.dirname(php_path), os.readlink(php_path))
    return get_version_from_path(os.path.dirname(real_path))

paths = get_homebrew_paths()

if len(sys.argv) == 2:
    # Reverse sort so that '5.5' will match newest-installed version of 5.5.
    success = False
    version_prefix = sys.argv[1]
    for version in sorted(paths.iterkeys(), reverse=True):
        if version[0:len(version_prefix)] == version_prefix:
            select_version_path(paths[version])
            success = True
            break
    if not success:
        sys.exit(1)

# Output available and current version(s).
current_version = get_current_version()
for version in sorted(paths.iterkeys()):
    print '*' if current_version == version else ' ', version

sys.exit(0)
